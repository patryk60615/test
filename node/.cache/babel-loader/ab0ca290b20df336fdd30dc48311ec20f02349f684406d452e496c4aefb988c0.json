{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\patry\\\\OneDrive\\\\Pulpit\\\\work-scheduler-main\\\\src\\\\components\\\\calendar\\\\days.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Days = props => {\n  const current = props.date;\n  const year = current.getFullYear();\n  const month = current.getMonth();\n  const firstDayOfMonth = new Date(year, month, 1);\n  const monthLength = new Date(year, month + 1, 0).getDate();\n  let weekDayOfFirstDayOfMonth = firstDayOfMonth.getDay();\n  let weekDays = [];\n  let daysOfMonth = [];\n  const eventDate = props.eventDate.toDateString();\n  console.log(daysOfMonth, weekDayOfFirstDayOfMonth);\n\n  // adds week days to array also transoform date from int to string and sets first letter to uppercase  \n  for (let i = 1; i <= 7; i++) {\n    let days = new Date(2022, 7, i).toLocaleString('default', {\n      weekday: 'long'\n    });\n    let daysToUpperCase = days.charAt(0).toUpperCase() + days.slice(1);\n    weekDays.push(daysToUpperCase.substring(0, 3));\n  }\n\n  // sets calendar days which doesnt't belong to this month to empty so they are not displayed\n  if (weekDayOfFirstDayOfMonth === 0) {\n    weekDayOfFirstDayOfMonth = 7;\n  }\n  for (let i = 1; i < weekDayOfFirstDayOfMonth; i++) {\n    daysOfMonth.push({\n      empty: true\n    });\n  }\n\n  // adds calendar days to array with data\n  for (let i = 1; i <= monthLength; i++) {\n    let dataOfDay = {\n      date: new Date(firstDayOfMonth),\n      dateString: firstDayOfMonth.toDateString(),\n      year: firstDayOfMonth.getFullYear(),\n      month: firstDayOfMonth.getMonth(),\n      selected: i === props.date.getDate(),\n      numberDay: firstDayOfMonth.getDate(),\n      empty: false\n    };\n    firstDayOfMonth.setDate(firstDayOfMonth.getDate() + 1);\n    daysOfMonth.push(dataOfDay);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar-main\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"week-days\",\n      children: weekDays.map((day, i) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"week-day\",\n          children: day\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar-days\",\n      children: daysOfMonth.map((day, i) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"calendar-day\" + (day.empty ? \" empty\" : \" fill\" + (day.currentDay ? \" current-day\" : \"\")),\n          onClick: () => {\n            props.changeDateOnClick(day);\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"calendar-day-number\" + (day.selected ? \" selected\" : \"\"),\n            children: day.numberDay\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"calendar-day-event-date\",\n            children: eventDate === day.dateString ? \"a\" : \" \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 33\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n_c = Days;\nexport default Days;\nvar _c;\n$RefreshReg$(_c, \"Days\");","map":{"version":3,"names":["React","Days","props","current","date","year","getFullYear","month","getMonth","firstDayOfMonth","Date","monthLength","getDate","weekDayOfFirstDayOfMonth","getDay","weekDays","daysOfMonth","eventDate","toDateString","console","log","i","days","toLocaleString","weekday","daysToUpperCase","charAt","toUpperCase","slice","push","substring","empty","dataOfDay","dateString","selected","numberDay","setDate","map","day","currentDay","changeDateOnClick"],"sources":["C:/Users/patry/OneDrive/Pulpit/work-scheduler-main/src/components/calendar/days.js"],"sourcesContent":["import React from 'react';\n\nconst Days = (props) => {\n    const current = props.date\n    const year = current.getFullYear()\n    const month = current.getMonth()\n    const firstDayOfMonth = new Date(year, month, 1)\n    const monthLength = new Date(year, month + 1, 0).getDate()\n    let weekDayOfFirstDayOfMonth = firstDayOfMonth.getDay()\n    let weekDays = []\n    let daysOfMonth = []\n\n    const eventDate = props.eventDate.toDateString()\n\n    console.log(daysOfMonth, weekDayOfFirstDayOfMonth)\n\n    // adds week days to array also transoform date from int to string and sets first letter to uppercase  \n    for(let i = 1; i <= 7; i++){\n        let days = new Date(2022, 7, i).toLocaleString('default', { weekday: 'long' })\n        let daysToUpperCase = days.charAt(0).toUpperCase() + days.slice(1)\n        weekDays.push(daysToUpperCase.substring(0,3))\n    }\n\n    // sets calendar days which doesnt't belong to this month to empty so they are not displayed\n    if (weekDayOfFirstDayOfMonth === 0){\n        weekDayOfFirstDayOfMonth = 7\n    }\n    for(let i = 1; i < weekDayOfFirstDayOfMonth; i++){\n        daysOfMonth.push({empty: true})\n    }\n\n    // adds calendar days to array with data\n    for(let i = 1; i <= monthLength; i++) {\n        let dataOfDay = {\n            date: (new Date(firstDayOfMonth)),\n            dateString: firstDayOfMonth.toDateString(),\n            year: firstDayOfMonth.getFullYear(),\n            month: firstDayOfMonth.getMonth(),\n            selected: (i === props.date.getDate()),\n            numberDay: firstDayOfMonth.getDate(),\n            empty: false\n        }\n        firstDayOfMonth.setDate(firstDayOfMonth.getDate() + 1);\n        daysOfMonth.push(dataOfDay)\n    }\n    \n    return (\n        <div className=\"calendar-main\">\n            <div className='week-days'>\n                {weekDays.map((day, i) => {\n                    return (\n                        <div key={i} className=\"week-day\">\n                            {day}\n                        </div>\n                    )})}\n                </div>\n                <div className=\"calendar-days\">\n                    {daysOfMonth.map((day, i) => {\n                        return (\n                            <div key={i} className={\"calendar-day\" + (day.empty ? \" empty\" : \" fill\" + (day.currentDay ? \" current-day\" : \"\"))} onClick = {() => {props.changeDateOnClick(day)}}>\n                                <p className={\"calendar-day-number\" + (day.selected ? \" selected\" : \"\")}>{day.numberDay}</p>\n                                <p className='calendar-day-event-date'>{eventDate === day.dateString ? \"a\" : \" \"}</p>\n                            </div>\n                        )\n                    })}\n                </div>\n        </div>\n    )\n}\n\nexport default Days"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}